{
  "version": 3,
  "sources": ["../../../src/config/siteMetadata.js", "../../../contentlayer.config.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: 'Pablo Pikassiet',\n  author: 'Pablo Pikassiet',\n  headerTitle: 'TailwindBlog',\n  description: 'An amazing Next.js template for creative people',\n\n  base_url: 'https://nextplate.netlify.app',\n  base_path: '/',\n  siteRepo: 'https://github.com/timlrx/tailwind-nextjs-starter-blog',\n\n  trailing_slash: false,\n  favicon: '/images/favicon.png',\n  logo: '/images/logo.svg',\n  logo_darkmode: '/images/logo-darkmode.svg',\n  logo_width: '225',\n  logo_height: '60',\n  logo_text: 'Pablo Pikassiet',\n\n  language: 'en',\n  theme: 'system', // system, dark or light\n  theme_switcher: true,\n\n  socialBanner: '/static/images/twitter-card.png',\n  locale: 'en',\n\n  metadata: {\n    meta_author: 'Themefisher',\n    meta_image: '/images/og-image.png',\n    meta_description: 'Next Boilerplate',\n  },\n\n  analytics: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // supports Plausible, Simple Analytics, Umami, Posthog or Google Analytics.\n    umamiAnalytics: {\n      // We use an env variable for this site to avoid other users cloning our analytics ID\n      umamiWebsiteId: process.env.NEXT_UMAMI_ID, // e.g. 123e4567-e89b-12d3-a456-426614174000\n    },\n    // plausibleAnalytics: {\n    //   plausibleDataDomain: '', // e.g. tailwind-nextjs-starter-blog.vercel.app\n    // },\n    // simpleAnalytics: {},\n    // posthogAnalytics: {\n    //   posthogProjectApiKey: '', // e.g. 123e4567-e89b-12d3-a456-426614174000\n    // },\n    // googleAnalytics: {\n    //   googleAnalyticsId: '', // e.g. G-XXXXXXX\n    // },\n  },\n  newsletter: {\n    // supports mailchimp, buttondown, convertkit, klaviyo, revue, emailoctopus\n    // Please add your .env file and modify it according to your selection\n    provider: 'buttondown',\n  },\n  comments: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // Select a provider and use the environment variables associated to it\n    // https://vercel.com/docs/environment-variables\n    provider: 'giscus', // supported providers: giscus, utterances, disqus\n    giscusConfig: {\n      // Visit the link below, and follow the steps in the 'configuration' section\n      // https://giscus.app/\n      repo: process.env.NEXT_PUBLIC_GISCUS_REPO,\n      repositoryId: process.env.NEXT_PUBLIC_GISCUS_REPOSITORY_ID,\n      category: process.env.NEXT_PUBLIC_GISCUS_CATEGORY,\n      categoryId: process.env.NEXT_PUBLIC_GISCUS_CATEGORY_ID,\n      mapping: 'pathname', // supported options: pathname, url, title\n      reactions: '1', // Emoji reactions: 1 = enable / 0 = disable\n      // Send discussion metadata periodically to the parent window: 1 = enable / 0 = disable\n      metadata: '0',\n      // theme example: light, dark, dark_dimmed, dark_high_contrast\n      // transparent_dark, preferred_color_scheme, custom\n      theme: 'light',\n      // theme when dark mode\n      darkTheme: 'transparent_dark',\n      // If the theme option above is set to 'custom`\n      // please provide a link below to your custom theme css file.\n      // example: https://giscus.app/themes/custom_example.css\n      themeURL: '',\n      // This corresponds to the `data-lang=\"en\"` in giscus's configurations\n      lang: 'en',\n    },\n  },\n  search: {\n    provider: 'kbar', // kbar or algolia\n    kbarConfig: {\n      searchDocumentsPath: 'search.json', // path to load documents to search\n    },\n    // provider: 'algolia',\n    // algoliaConfig: {\n    //   // The application ID provided by Algolia\n    //   appId: 'R2IYF7ETH7',\n    //   // Public API key: it is safe to commit it\n    //   apiKey: '599cec31baffa4868cae4e79f180729b',\n    //   indexName: 'docsearch',\n    // },\n  },\n}\n\nmodule.exports = siteMetadata\n", "import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer/source-files'\r\nimport { writeFileSync } from 'fs'\r\nimport readingTime from 'reading-time'\r\nimport GithubSlugger from 'github-slugger'\r\nimport path from 'path'\r\n// Remark packages\r\nimport remarkGfm from 'remark-gfm'\r\nimport remarkMath from 'remark-math'\r\nimport {\r\n  remarkExtractFrontmatter,\r\n  remarkCodeTitles,\r\n  remarkImgToJsx,\r\n  extractTocHeadings,\r\n} from 'pliny/mdx-plugins/index.js'\r\n// Rehype packages\r\nimport rehypeSlug from 'rehype-slug'\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\r\nimport rehypeKatex from 'rehype-katex'\r\nimport rehypeCitation from 'rehype-citation'\r\nimport rehypePrismPlus from 'rehype-prism-plus'\r\nimport rehypePresetMinify from 'rehype-preset-minify'\r\nimport siteMetadata from './src/config/siteMetadata'\r\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js'\r\n\r\nconst root = process.cwd()\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\n\r\nconst computedFields: ComputedFields = {\r\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\r\n  },\r\n  path: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath,\r\n  },\r\n  filePath: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.sourceFilePath,\r\n  },\r\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\r\n}\r\n\r\n/**\r\n * Count the occurrences of all tags and categories across blog posts and write to json file\r\n */\r\nfunction createCategoryCount(allBlogs) {\r\n  const categoryCount: Record<string, number> = {}\r\n  allBlogs.forEach((file) => {\r\n    if (file.categories && (!isProduction || file.draft !== true)) {\r\n      file.categories.forEach((category) => {\r\n        const formattedCategory = GithubSlugger.slug(category)\r\n        if (formattedCategory in categoryCount) {\r\n          categoryCount[formattedCategory] += 1\r\n        } else {\r\n          categoryCount[formattedCategory] = 1\r\n        }\r\n      })\r\n    }\r\n  })\r\n  writeFileSync('./app/category-data.json', JSON.stringify(categoryCount))\r\n}\r\n\r\nfunction createTagCount(allBlogs) {\r\n  const tagCount: Record<string, number> = {}\r\n  allBlogs.forEach((file) => {\r\n    if (file.tags && (!isProduction || file.draft !== true)) {\r\n      file.tags.forEach((tag) => {\r\n        const formattedTag = GithubSlugger.slug(tag)\r\n        if (formattedTag in tagCount) {\r\n          tagCount[formattedTag] += 1\r\n        } else {\r\n          tagCount[formattedTag] = 1\r\n        }\r\n      })\r\n    }\r\n  })\r\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount))\r\n}\r\n\r\nfunction createSearchIndex(allBlogs) {\r\n  if (\r\n    siteMetadata?.search?.provider === 'kbar' &&\r\n    siteMetadata.search.kbarConfig.searchDocumentsPath\r\n  ) {\r\n    writeFileSync(\r\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\r\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\r\n    )\r\n    console.log('Local search index generated...')\r\n  }\r\n}\r\n\r\nexport const Blog = defineDocumentType(() => ({\r\n  name: 'Blog',\r\n  filePathPattern: '**/*.*',\r\n  contentType: 'mdx',\r\n  exclude: ['_index.md'],\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    meta_title: { type: 'string' },\r\n    description: { type: 'string' },\r\n    date: { type: 'date', required: true },\r\n    image: { type: 'string' },\r\n    categories: { type: 'list', of: { type: 'string' }, default: [] },\r\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\r\n    lastmod: { type: 'date' },\r\n    draft: { type: 'boolean' },\r\n    summary: { type: 'string' },\r\n    images: { type: 'json' },\r\n    authors: { type: 'list', of: { type: 'string' } },\r\n    serie: { type: 'string' },\r\n    layout: { type: 'string' },\r\n    bibliography: { type: 'string' },\r\n    canonicalUrl: { type: 'string' },\r\n  },\r\n  computedFields: {\r\n    ...computedFields,\r\n    structuredData: {\r\n      type: 'json',\r\n      resolve: (doc) => ({\r\n        '@context': 'https://schema.org',\r\n        '@type': 'BlogPosting',\r\n        headline: doc.title,\r\n        datePublished: doc.date,\r\n        dateModified: doc.lastmod || doc.date,\r\n        description: doc.summary,\r\n        image: doc.images ? doc.images[0] : siteMetadata.socialBanner,\r\n        url: `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`,\r\n      }),\r\n    },\r\n  },\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'src/content/blog/',\r\n  documentTypes: [Blog],\r\n  mdx: {\r\n    cwd: process.cwd(),\r\n    remarkPlugins: [\r\n      remarkExtractFrontmatter,\r\n      remarkGfm,\r\n      remarkCodeTitles,\r\n      remarkMath,\r\n      remarkImgToJsx,\r\n    ],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeAutolinkHeadings,\r\n      rehypeKatex,\r\n      [rehypeCitation, { path: path.join(root, 'src', 'content', 'blog') }],\r\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\r\n      rehypePresetMinify,\r\n    ],\r\n  },\r\n  /*onSuccess: async (importData) => {\r\n    const { allBlogs } = await importData()\r\n    createTagCount(allBlogs)\r\n    createSearchIndex(allBlogs)\r\n  },*/\r\n})\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,QAAMA,gBAAe;AAAA,MACnB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,aAAa;AAAA,MAEb,UAAU;AAAA,MACV,WAAW;AAAA,MACX,UAAU;AAAA,MAEV,gBAAgB;AAAA,MAChB,SAAS;AAAA,MACT,MAAM;AAAA,MACN,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,WAAW;AAAA,MAEX,UAAU;AAAA,MACV,OAAO;AAAA;AAAA,MACP,gBAAgB;AAAA,MAEhB,cAAc;AAAA,MACd,QAAQ;AAAA,MAER,UAAU;AAAA,QACR,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,kBAAkB;AAAA,MACpB;AAAA,MAEA,WAAW;AAAA;AAAA;AAAA;AAAA,QAIT,gBAAgB;AAAA;AAAA,UAEd,gBAAgB,QAAQ,IAAI;AAAA;AAAA,QAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWF;AAAA,MACA,YAAY;AAAA;AAAA;AAAA,QAGV,UAAU;AAAA,MACZ;AAAA,MACA,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,QAKR,UAAU;AAAA;AAAA,QACV,cAAc;AAAA;AAAA;AAAA,UAGZ,MAAM,QAAQ,IAAI;AAAA,UAClB,cAAc,QAAQ,IAAI;AAAA,UAC1B,UAAU,QAAQ,IAAI;AAAA,UACtB,YAAY,QAAQ,IAAI;AAAA,UACxB,SAAS;AAAA;AAAA,UACT,WAAW;AAAA;AAAA;AAAA,UAEX,UAAU;AAAA;AAAA;AAAA,UAGV,OAAO;AAAA;AAAA,UAEP,WAAW;AAAA;AAAA;AAAA;AAAA,UAIX,UAAU;AAAA;AAAA,UAEV,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN,UAAU;AAAA;AAAA,QACV,YAAY;AAAA,UACV,qBAAqB;AAAA;AAAA,QACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASF;AAAA,IACF;AAEA,WAAO,UAAUA;AAAA;AAAA;;;ACjFjB,0BAAyB;AArBzB,SAAS,oBAAoC,kBAAkB;AAC/D,SAAS,qBAAqB;AAC9B,OAAO,iBAAiB;AACxB,OAAO,mBAAmB;AAC1B,OAAO,UAAU;AAEjB,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,iBAAiB;AACxB,OAAO,oBAAoB;AAC3B,OAAO,qBAAqB;AAC5B,OAAO,wBAAwB;AAE/B,SAAS,gBAAgB,iBAAiB;AAE1C,IAAM,OAAO,QAAQ,IAAI;AACzB,IAAM,eAAe,QAAQ,IAAI,aAAa;AAE9C,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,EACjE;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,mBAAmB,IAAI,KAAK,GAAG,EAAE;AAC5E;AAoDO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,SAAS,CAAC,WAAW;AAAA,EACrB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,aAAa,EAAE,MAAM,SAAS;AAAA,IAC9B,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,OAAO,EAAE,MAAM,SAAS;AAAA,IACxB,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,SAAS,CAAC,EAAE;AAAA,IAChE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,SAAS,CAAC,EAAE;AAAA,IAC1D,SAAS,EAAE,MAAM,OAAO;AAAA,IACxB,OAAO,EAAE,MAAM,UAAU;AAAA,IACzB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,QAAQ,EAAE,MAAM,OAAO;AAAA,IACvB,SAAS,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAChD,OAAO,EAAE,MAAM,SAAS;AAAA,IACxB,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,cAAc,EAAE,MAAM,SAAS;AAAA,IAC/B,cAAc,EAAE,MAAM,SAAS;AAAA,EACjC;AAAA,EACA,gBAAgB;AAAA,IACd,GAAG;AAAA,IACH,gBAAgB;AAAA,MACd,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AAAA,QACjB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU,IAAI;AAAA,QACd,eAAe,IAAI;AAAA,QACnB,cAAc,IAAI,WAAW,IAAI;AAAA,QACjC,aAAa,IAAI;AAAA,QACjB,OAAO,IAAI,SAAS,IAAI,OAAO,CAAC,IAAI,oBAAAC,QAAa;AAAA,QACjD,KAAK,GAAG,oBAAAA,QAAa,OAAO,IAAI,IAAI,KAAK,aAAa;AAAA,MACxD;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,KAAK,QAAQ,IAAI;AAAA,IACjB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,gBAAgB,EAAE,MAAM,KAAK,KAAK,MAAM,OAAO,WAAW,MAAM,EAAE,CAAC;AAAA,MACpE,CAAC,iBAAiB,EAAE,iBAAiB,MAAM,eAAe,KAAK,CAAC;AAAA,MAChE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAMF,CAAC;",
  "names": ["siteMetadata", "siteMetadata"]
}
