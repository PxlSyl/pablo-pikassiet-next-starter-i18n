{
  "version": 3,
  "sources": ["../../../config/siteMetadata.js", "../../../app/[locale]/i18n/locales.js", "../../../contentlayer.config.ts", "../../../lib/utils/readingTime.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: 'Pablo Pikassiet',\n  author: 'Pablo Pikassiet',\n  description: 'An amazing Next.js template for creative people',\n\n  siteUrl: 'https://pablo-pikassiet-next-starter-i18n.vercel.app',\n  base_path: '/',\n  siteRepo: 'https://github.com/PxlSyl/pablo-pikassiet-next-starter-i18n',\n\n  trailing_slash: false,\n  logo: '/images/logo.svg',\n  logo_darkmode: '/images/logo-darkmode.svg',\n  logo_width: '225',\n  logo_height: '60',\n  logo_text: 'Pablo Pikassiet',\n\n  language: 'en',\n  theme: 'system', // system, dark or light\n  theme_switcher: true,\n\n  socialBanner: '/images/twitter-card.png',\n  locale: 'en',\n\n  analytics: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // supports Plausible, Simple Analytics, Umami, Posthog or Google Analytics.\n    umamiAnalytics: {\n      // We use an env variable for this site to avoid other users cloning our analytics ID\n      umamiWebsiteId: process.env.NEXT_UMAMI_ID, // e.g. 123e4567-e89b-12d3-a456-426614174000\n    },\n    // plausibleAnalytics: {\n    //   plausibleDataDomain: '', // e.g. tailwind-nextjs-starter-blog.vercel.app\n    // },\n    // simpleAnalytics: {},\n    // posthogAnalytics: {\n    //   posthogProjectApiKey: '', // e.g. 123e4567-e89b-12d3-a456-426614174000\n    // },\n    // googleAnalytics: {\n    //   googleAnalyticsId: '', // e.g. G-XXXXXXX\n    // },\n  },\n  newsletter: {\n    // supports mailchimp, buttondown, convertkit, klaviyo, revue, emailoctopus\n    // Please add your .env file and modify it according to your selection\n    provider: 'buttondown',\n  },\n  comments: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // Select a provider and use the environment variables associated to it\n    // https://vercel.com/docs/environment-variables\n    provider: 'giscus', // supported providers: giscus, utterances, disqus\n    giscusConfig: {\n      // Visit the link below, and follow the steps in the 'configuration' section\n      // https://giscus.app/\n      repo: process.env.NEXT_PUBLIC_GISCUS_REPO,\n      repositoryId: process.env.NEXT_PUBLIC_GISCUS_REPOSITORY_ID,\n      category: process.env.NEXT_PUBLIC_GISCUS_CATEGORY,\n      categoryId: process.env.NEXT_PUBLIC_GISCUS_CATEGORY_ID,\n      mapping: 'pathname', // supported options: pathname, url, title\n      reactions: '1', // Emoji reactions: 1 = enable / 0 = disable\n      // Send discussion metadata periodically to the parent window: 1 = enable / 0 = disable\n      metadata: '0',\n      // theme example: light, dark, dark_dimmed, dark_high_contrast\n      // transparent_dark, preferred_color_scheme, custom\n      theme: 'light',\n      // theme when dark mode\n      darkTheme: 'transparent_dark',\n      // If the theme option above is set to 'custom`\n      // please provide a link below to your custom theme css file.\n      // example: https://giscus.app/themes/custom_example.css\n      themeURL: '',\n      // This corresponds to the `data-lang=\"en\"` in giscus's configurations\n      lang: 'en',\n    },\n  },\n  search: {\n    provider: 'kbar', // kbar or algolia\n    kbarConfig: {\n      searchDocumentsPath: 'search.json', // path to load documents to search\n    },\n    // provider: 'algolia',\n    // algoliaConfig: {\n    //   // The application ID provided by Algolia\n    //   appId: 'R2IYF7ETH7',\n    //   // Public API key: it is safe to commit it\n    //   apiKey: '599cec31baffa4868cae4e79f180729b',\n    //   indexName: 'docsearch',\n    // },\n  },\n}\n\nmodule.exports = siteMetadata\n", "const fallbackLng = 'en'\nconst secondLng = 'fr'\n\nmodule.exports = { fallbackLng, secondLng }\n", "import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer/source-files'\nimport { writeFileSync } from 'fs'\nimport readingTime from './lib/utils/readingTime'\nimport { slug } from 'github-slugger'\nimport path from 'path'\n// Remark packages\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from 'pliny/mdx-plugins/index.js'\n// Rehype packages\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeKatex from 'rehype-katex'\nimport rehypeCitation from 'rehype-citation'\nimport rehypePrismPlus from 'rehype-prism-plus'\nimport rehypePresetMinify from 'rehype-preset-minify'\nimport siteMetadata from './config/siteMetadata'\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js'\nimport { allBlogs } from './.contentlayer/generated'\nimport { fallbackLng, secondLng } from './app/[locale]/i18n/locales'\nimport { defineNestedType } from 'contentlayer/source-files'\n\nconst root = process.cwd()\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n}\n\nasync function generateSlugMap(allBlogs) {\n  const slugMap = {}\n\n  // Process each blog post\n  allBlogs.forEach((blog) => {\n    const { localeid, language, slug } = blog\n    const formattedLng = language === fallbackLng ? fallbackLng : secondLng\n\n    if (!slugMap[localeid]) {\n      slugMap[localeid] = {}\n    }\n\n    // Add the slug to the map for the specific language\n    slugMap[localeid][formattedLng] = slug\n  })\n\n  writeFileSync('./config/data/localeid-map.json', JSON.stringify(slugMap, null, 2))\n}\n\n/**\n * Count the occurrences of all categories tags across blog posts and write to json file\n * Add logic to your own locales and project\n */\n\nfunction createCategoryCount(allBlogs) {\n  const categoryCount = { [fallbackLng]: {}, [secondLng]: {} }\n\n  allBlogs.forEach((file) => {\n    if (file.categories && file.draft === false) {\n      file.categories.forEach((category: string) => {\n        const formattedCategory = slug(category)\n        if (file.language === fallbackLng) {\n          categoryCount[fallbackLng][formattedCategory] =\n            (categoryCount[fallbackLng][formattedCategory] || 0) + 1\n        } else if (file.language === secondLng) {\n          categoryCount[secondLng][formattedCategory] =\n            (categoryCount[secondLng][formattedCategory] || 0) + 1\n        }\n      })\n    }\n  })\n\n  // Write the combined count object to a single JSON file\n  writeFileSync('./config/data/category-data.json', JSON.stringify(categoryCount))\n  console.log('Results for category-data.json written.')\n}\n\nfunction createTagCount(allBlogs) {\n  const tagCount = {\n    [fallbackLng]: {},\n    [secondLng]: {},\n  }\n\n  allBlogs.forEach((file) => {\n    if (file.tags && file.draft === false) {\n      file.tags.forEach((tag: string) => {\n        const formattedTag = slug(tag)\n        if (file.language === fallbackLng) {\n          tagCount[fallbackLng][formattedTag] = (tagCount[fallbackLng][formattedTag] || 0) + 1\n        } else if (file.language === secondLng) {\n          tagCount[secondLng][formattedTag] = (tagCount[secondLng][formattedTag] || 0) + 1\n        }\n      })\n    }\n  })\n  writeFileSync('./config/data/tag-data.json', JSON.stringify(tagCount))\n  console.log('Results for tag-data.json written.')\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === 'kbar' &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    )\n    console.log('Local search index generated...')\n  }\n}\n\nexport const Series = defineNestedType(() => ({\n  name: 'Series',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    order: {\n      type: 'number',\n      required: true,\n    },\n  },\n}))\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: '**/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    series: { type: 'nested', of: Series },\n    meta_title: { type: 'string' },\n    description: { type: 'string' },\n    date: { type: 'date', required: true },\n    language: { type: 'string', required: true },\n    localeid: { type: 'string', required: true },\n    image: { type: 'string' },\n    categories: { type: 'list', of: { type: 'string' }, default: [] },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    authors: { type: 'list', of: { type: 'string' } },\n    serie: { type: 'string' },\n    layout: { type: 'string' },\n    bibliography: { type: 'string' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    structuredData: {\n      type: 'json',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.lastmod || doc.date,\n        description: doc.summary,\n        image: doc.image ? doc.image[0] : siteMetadata.socialBanner,\n        url: `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`,\n      }),\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content/blog',\n  documentTypes: [Blog],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'content', 'blog') }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  },\n  /*onSuccess: async (importData) => {\n    const { allBlogs } = await importData()\n    generateSlugMap(allBlogs)\n    createTagCount(allBlogs)\n    createSearchIndex(allBlogs)\n  },*/\n})\n", "// content reading\nconst readingTime = (content: string): string => {\n  const WPS = 275 / 60\n\n  let images = 0\n  const regex = /\\w/\n\n  const words = content.split(' ').filter((word) => {\n    if (word.includes('<img')) {\n      images += 1\n    }\n    return regex.test(word)\n  }).length\n\n  const imageAdjust = images * 4\n  let imageSecs = 0\n  let imageFactor = 12\n\n  while (images) {\n    imageSecs += imageFactor\n    if (imageFactor > 3) {\n      imageFactor -= 1\n    }\n    images -= 1\n  }\n\n  const minutes = Math.ceil(((words - imageAdjust) / WPS + imageSecs) / 60)\n\n  if (minutes < 2) {\n    return minutes + ` Minute`\n  } else {\n    return minutes + ` Minutes`\n  }\n}\n\nexport default readingTime\n"],
  "mappings": "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",
  "names": ["siteMetadata", "fallbackLng", "secondLng", "siteMetadata"]
}
